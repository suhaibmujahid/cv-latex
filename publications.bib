@inproceedings{Abdalkareem_FSE2017,
  author    = {Abdalkareem, Rabe and Nourry, Olivier and Wehaibi, Sultan and Mujahid, Suhaib and Shihab, Emad},
  title     = {Why Do Developers Use Trivial Packages? An Empirical Case Study on npm},
  year      = {2017},
  isbn      = {9781450351058},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3106237.3106267},
  doi       = {10.1145/3106237.3106267},
  booktitle = {Proceedings of the 11th Joint Meeting on Foundations of Software Engineering},
  pages     = {385–395},
  numpages  = {11},
  keywords  = {Node.js, Code Reuse, Empirical Studies, JavaScript},
  location  = {Paderborn, Germany},
  series    = {ESEC/FSE 2017}
}

@article{Abdalkareem_TSE2021,
  author  = {Rabe Abdalkareem and Suhaib Mujahid and Emad Shihab and Juergen Rilling},
  journal = {IEEE Transactions on Software Engineering Journal (TSE)},
  title   = {Which Commits Can Be {CI} Skipped?},
  year    = {2021},
  volume  = {47},
  number  = {3},
  pages   = {448-463},
  doi     = {10.1109/TSE.2019.2897300}
}

@inproceedings{8812072,
  author    = {George G. Cabral and Leandro L. Minku and Emad Shihab and Suhaib Mujahid},
  booktitle = {Proceedings of the 41st {IEEE/ACM} International Conference on Software Engineering},
  series    = {ICSE '19},
  title     = {Class Imbalance Evolution and Verification Latency in Just-in-Time Software Defect Prediction},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {666-676},
  doi       = {10.1109/ICSE.2019.00076}
}

@inproceedings{8530042,
  author    = {Suhaib Mujahid and Rabe Abdalkareem and Emad Shihab},
  booktitle = {Proceedings of the 2018 IEEE International Conference on Software Maintenance and Evolution},
  series    = {ICSME '18},
  title     = {Studying Permission Related Issues in Android Wearable Apps},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {345-356},
  doi       = {10.1109/ICSME.2018.00043}
}

@inproceedings{10.1145/3106237.3121279,
  author    = {Mujahid, Suhaib},
  title     = {Detecting Wearable App Permission Mismatches: A Case Study on Android Wear},
  year      = {2017},
  isbn      = {9781450351058},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3106237.3121279},
  doi       = {10.1145/3106237.3121279},
  abstract  = {Wearable devices are becoming increasingly popular. These wearable devices run what is known as wearable apps. Wearable apps are packaged with handheld apps, that must be installed on the accompanying handheld device (e.g., phone).  Given that wearable apps are tightly coupled with the handheld apps, any wearable permission must also be requested in the handheld version of the app on the Android Wear platform. However, in some cases, the wearable apps may request permissions that do not exist in the handheld app, resulting in a permission mismatch, and causing the wearable app to error or crash. In this paper, we propose a technique to detect wear app permission mismatches. We perform a case study on 2,409 free Android Wear apps and find that 73 released wearable apps suffer from the permission mismatch problem. },
  booktitle = {Proceedings of the 11th Joint Meeting on Foundations of Software Engineering},
  pages     = {1065–1067},
  numpages  = {3},
  keywords  = {Detect, Android Wear, Permissions, Mismatch},
  location  = {Paderborn, Germany},
  series    = {ESEC/FSE 2017}
}

@article{8961089,
  author  = {Rabe Abdalkareem and Suhaib Mujahid and Emad Shihab},
  journal = {IEEE Transactions on Software Engineering Journal (TSE)},
  title   = {A Machine Learning Approach to Improve the Detection of {CI} Skip Commits},
  year    = {2020},
  volume  = {},
  number  = {},
  pages   = {1-1},
  doi     = {10.1109/TSE.2020.2967380}
}

@inproceedings{10.1145/3379597.3387476,
  author    = {Mujahid, Suhaib and Abdalkareem, Rabe and Shihab, Emad and McIntosh, Shane},
  title     = {Using Others' Tests to Identify Breaking Updates},
  year      = {2020},
  isbn      = {9781450375177},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3379597.3387476},
  doi       = {10.1145/3379597.3387476},
  abstract  = {The reuse of third-party packages has become a common practice in contemporary software development. Software dependencies are constantly evolving with newly added features and patches that fix bugs in older versions. However, updating dependencies could introduce new bugs or break backward compatibility. In this work, we propose a technique to detect breakage-inducing versions of third-party dependencies. The key insight behind our approach is to leverage the automated test suites of other projects that depend upon the same dependency to test newly released versions. We conjecture that this crowd-based approach will help to detect breakage-inducing versions because it broadens the set of realistic usage scenarios to which a package version has been exposed. To evaluate our conjecture, we perform an empirical study of 391,553 npm packages. We use the dependency network from these packages to identify candidate tests of third-party packages. Moreover, to evaluate our proposed technique, we mine the history of this dependency network to identify ten breakage-inducing versions. We find that our proposed technique can detect six of the ten studied breakage-inducing versions. Our findings can help developers to make more informed decisions when they update their dependencies.},
  booktitle = {Proceedings of the 17th International Conference on Mining Software Repositories},
  pages     = {466–476},
  numpages  = {11},
  keywords  = {Software Testing, JavaScript, Node.js, Software Quality, Software Ecosystems, Empirical Studies},
  location  = {Seoul, Republic of Korea},
  series    = {MSR '20}
}

@article{9350178,
  author  = {Diego Elias Costa and Suhaib Mujahid and Rabe Abdalkareem and Emad Shihab},
  journal = {IEEE Transactions on Software Engineering Journal (TSE)},
  title   = {Breaking Type-Safety in Go: An Empirical Study on the Usage of the unsafe Package},
  year    = {2021},
  volume  = {},
  number  = {},
  pages   = {1-1},
  doi     = {10.1109/TSE.2021.3057720}
}

@mastersthesis{mujahid_thesis,
  title   = {Determining and Detecting Permission Issues of Wearable Apps},
  author  = {Mujahid, Suhaib},
  year    = {2018},
  month   = {1},
  url     = {https://spectrum.library.concordia.ca/983405},
  school  = {Concordia University},
  address = {Montreal, Quebec ,Canada}
}

@article{Chen2021,
  author   = {Chen, Xiaowei and Abdalkareem, Rabe and Mujahid, Suhaib and Shihab, Emad and Xia, Xin},
  title    = {Helping or not helping? Why and how trivial packages impact the npm ecosystem},
  journal  = {Empirical Software Engineering Journal (EMSE)},
  year     = {2021},
  month    = {Mar},
  day      = {02},
  volume   = {26},
  number   = {2},
  pages    = {27},
  abstract = {Developers often share their code snippets by packaging them and making them available to others through software packages. How much a package does and how big it is can be seen as positive or negative. Recent studies showed that many packages that exist in the npm ecosystem are trivial and may introduce high dependency overhead. Hence, one question that arises is why developers choose to publish these trivial packages. Therefore, in this paper, we perform a developer-centered study to empirically examine why developers choose to publish such trivial packages. Specifically, we ask 1) why developers publish trivial packages, 2) what they believe to be the possible negative impacts of these packages, and 3) how such negative issues can be mitigated. The survey response of 59 JavaScript developers who publish trivial npm packages showed that the main advantages for publishing these trivial packages are to provide reusable components, testing {\&} documentation, and separation of concerns. Even the developers who publish these trivial packages admitted to having issues when they publish such packages, which include the maintenance of multiple packages, dependency hell, finding the right package, and the increase of duplicated packages in the ecosystems. Furthermore, we found that the majority of the developers suggested grouping these trivial packages to cope with the problems associated with publishing them. Then, to quantitatively investigate the impact of these trivial packages on the npm ecosystem and its users, we examine grouping these trivial packages. We found that if trivial packages that are always used together are grouped, the ecosystem can reduce the number of dependencies by approximately 13{\%}. Our findings shed light on the impact of publishing trivial packages and show that ecosystems and developer communities need to rethink their publishing policies since it can negatively impact the developers and the entire ecosystem.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-020-09904-w},
  url      = {https://doi.org/10.1007/s10664-020-09904-w}
}

@article{Hoyos2021,
  author   = {Hoyos, Juan and Abdalkareem, Rabe and Mujahid, Suhaib and Shihab, Emad and Bedoya, Albeiro Espinosa},
  title    = {On the Removal of Feature Toggles},
  journal  = {Empirical Software Engineering Journal (EMSE)},
  year     = {2021},
  month    = {Feb},
  day      = {03},
  volume   = {26},
  number   = {2},
  pages    = {15},
  abstract = {Feature Toggling is a technique to control the execution of features in a software project. For example, practitioners using feature toggles can experiment with new features in a production environment by exposing them to a subset of users. Some of these toggles require additional maintainability efforts and are expected to be removed, whereas others are meant to remain for a long time. However, to date, very little is known about the removal of feature toggles, which is why we focus on this topic in our paper. We conduct an empirical study that focuses on the removal of feature toggles. We use source code analysis techniques to analyze 12 Python open source projects and surveyed 61 software practitioners to provide deeper insights on the topic. Our study shows that 75{\%} of the toggle components in the studied Python projects are removed within 49 weeks after introduction. However, eventually practitioners remove feature toggles to follow the life cycle of a feature when it becomes stable in production. We also find that not all long-term feature toggles are designed to live that long and not all feature toggles are removed from the source code, opening the possibilities to unwanted risks. Our study broadens the understanding of feature toggles by identifying reasons for their survival in practice and aims to help practitioners make better decisions regarding the way they manage and remove feature toggles.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-020-09902-y},
  url      = {https://doi.org/10.1007/s10664-020-09902-y}
}

@article{Abdalkareem2020,
  author   = {Abdalkareem, Rabe and Oda, Vinicius and Mujahid, Suhaib and Shihab, Emad},
  title    = {On the impact of using trivial packages: an empirical case study on npm and PyPI},
  journal  = {Empirical Software Engineering Journal (EMSE)},
  year     = {2020},
  month    = {Mar},
  day      = {01},
  volume   = {25},
  number   = {2},
  pages    = {1168-1204},
  abstract = {Code reuse has traditionally been encouraged since it enables one to avoid re-inventing the wheel. Due to the npm left-pad package incident where a trivial package led to the breakdown of some of the most popular web applications such as Facebook and Netflix, some questioned such reuse. Reuse of trivial packages is particularly prevalent in platforms such as npm. To date, there is no study that examines the reason why developers reuse trivial packages other than in npm. Therefore, in this paper, we study two large platforms npm and PyPI. We mine more than 500,000 npm packages and 38,000 JavaScript applications and more than 63,000 PyPI packages and 14,000 Python applications to study the prevalence of trivial packages. We found that trivial packages are common, making up between 16.0{\%} to 10.5{\%} of the studied platforms. We performed surveys with 125 developers who use trivial packages to understand the reasons and drawbacks of their use. Our surveys revealed that trivial packages are used because they are perceived to be well implemented and tested pieces of code. However, developers are concerned about maintaining and the risks of breakages due to the extra dependencies trivial packages introduce. To objectively verify the survey results, we validate the most cited reason and drawback. We find that contrary to developers' beliefs only around 28{\%} of npm and 49{\%} PyPI trivial packages have tests. However, trivial packages appear to be `deployment tested' and to have similar test, usage and community interest as non-trivial packages. On the other hand, we found that 18.4{\%} and 2.9{\%} of the studied trivial packages have more than 20 dependencies in npm and PyPI, respectively.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-019-09792-9},
  url      = {https://doi.org/10.1007/s10664-019-09792-9}
}

@article{Mujahid2018,
  author   = {Mujahid, Suhaib and Sierra, Giancarlo and Abdalkareem, Rabe and Shihab, Emad and Shang, Weiyi},
  title    = {An empirical study of Android Wear user complaints},
  journal  = {Empirical Software Engineering Journal (EMSE)},
  year     = {2018},
  month    = {Dec},
  day      = {01},
  volume   = {23},
  number   = {6},
  pages    = {3476-3502},
  abstract = {Wearable apps are becoming increasingly popular in recent years. Nevertheless, to date, very few studies have examined the issues that wearable apps face. Prior studies showed that user reviews contain a plethora of insights that can be used to understand quality issues and help developers build better quality mobile apps. Therefore, in this paper, we mine user reviews in order to understand the user complaints about wearable apps. We manually sample and categorize 2,667 reviews from 19 Android wearable apps. Additionally, we examine the replies posted by developers in response to user complaints. This allows us to determine the type of complaints that developers care about the most, and to identify problems that despite being important to users, do not receive a proper response from developers. Our findings indicate that the most frequent complaints are related to Functional Errors, Cost, and Lack of Functionality, whereas the most negatively impacting complaints are related to Installation Problems, Device Compatibility, and Privacy {\&} Ethical Issues. We also find that developers mostly reply to complaints related to Privacy {\&} Ethical Issues, Performance Issues, and notification related issues. Furthermore, we observe that when developers reply, they tend to provide a solution, request more details, or let the user know that they are working on a solution. Lastly, we compare our findings on wearable apps with the study done by Khalid et al. (2015) on handheld devices. From this, we find that some complaint types that appear in handheld apps also appear in wearable apps; though wearable apps have unique issues related to Lack of Functionality, Installation Problems, Connection {\&} Sync, Spam Notifications, and Missing Notifications. Our results highlight the issues that users of wearable apps face the most, and the issues to which developers should pay additional attention to due to their negative impact.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-018-9615-8},
  url      = {https://doi.org/10.1007/s10664-018-9615-8}
}

@inproceedings{7972723,
  author    = {Suhaib Mujahid and Giancarlo Sierra and Rabe Abdalkareem and Emad Shihab and Weiyi Shang},
  booktitle = {Proceedings of the 4th {IEEE/ACM} International Conference on Mobile Software Engineering and Systems},
  title     = {Examining User Complaints of Wearable Apps: A Case Study on Android Wear},
  year      = {2017},
  volume    = {},
  number    = {},
  pages     = {96-99},
  doi       = {10.1109/MOBILESoft.2017.25},
  series    = {MOBILESoft '17}
}

@unpublished{Mujahid_TEM2021a,
  author = {Suhaib Mujahid and Rabe Abdalkareem and Emad Shihab},
  title  = {What are the characteristics of highly-used packages? A case study on the npm ecosystem},
  note   = {Submited to IEEE Transactions on Engineering Management Journal (TEM)},
  year   = {2021}
}
  
@unpublished{Mujahid_TEM2021b,
  author = {Suhaib Mujahid and Diego Elias Costa and Rabe Abdalkareem and Emad Shihab and Mohamed Aymen Saied and Bram Adams},
  title  = {“Towards Using Package Centrality Trend to Identify Packages in Decline},
  note   = {Submited to IEEE Transactions on Engineering Management Journal (TEM)},
  year   = {2021}
}
